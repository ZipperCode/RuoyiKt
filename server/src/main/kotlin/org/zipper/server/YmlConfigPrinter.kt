package org.zipper.server

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.CommandLineRunner
import org.springframework.core.env.AbstractEnvironment
import org.springframework.core.env.EnumerablePropertySource
import org.springframework.core.env.Environment
import org.springframework.core.env.PropertySource
import org.springframework.stereotype.Component

@Component
class YmlConfigPrinter : CommandLineRunner {

    @Autowired
    private lateinit var environment: Environment

    override fun run(vararg args: String?) {
//        println("变量 = ${args.joinToString(", ")}")
//        println("当前环境：${environment.activeProfiles.joinToString(", ")}")
//        println
//        println("YAML 配置信息：")
//        environment.activeProfiles.forEach { activeProfile ->
//            println("Active Profile: $activeProfile")
//        }
//
//        if (environment is AbstractEnvironment) {  // Cast and null check
//            val propertySources = (environment as AbstractEnvironment).propertySources
//
//            propertySources.forEach { propertySource ->
//                if (propertySource is PropertySource<*>) {
//                    val source = propertySource.source
//                    if (source is Map<*, *>) {
//                        source.forEach { k, v ->
//                            println("配置:\t >>>> ${k}: $v")
//                        }
//                    }
//                }
//            }
//        } else {
//            println("Environment is not an AbstractEnvironment. Cannot print properties.")
//        }
    }
}